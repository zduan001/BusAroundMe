//interface Iterator<T> {
//  T next();  // return current and advance.  throws exception if past the end
//  bool hasNext();
//}
//Iterator<T> getItemsFromServer();
//Iterator<Iterator<T>> getItemsFromAllServers();
//nested: [ [1,2,3] , [4], [], [5] ]
//flattened: [1,2,3,4,5]

//public class IteratorFlattener<T> : Iterator<T> {
//    public IteratorFlattener<T>( iterator<Iterator<T>> input)
//    {
//        List<Iterator<T>> tmpList = new List<Iterator<T>>();
//        while(input.hasNext())
//        {
//            tmpList.add(input.next());
//        }

//        tmpList.copyto(internalIterator);
//        currentIteratorindex = 0;
//    }


//    private Iterator<T>[] internalIterator;
//    private int currentIteratorindex;
//    public T next()
//    {
//        if(hasNext())
//        {
//            if(inernalItrator[curreniteratorindex].hasNext())
//            {
//                return inernalItrator[curreniteratorindex].next();
//            }
//            else
//            {    
//                curreniteratorindex++
//                this.next();
//            }
//        }
//        else
//        {
//            throw new exception()j;
//        }
//    }

//    bool hasNext()
//    {
//        if(inernalItrator[curreniteratorindex].hasNext())
//        {
//            return true;
//        }
//        else
//        {
//            if(curreniteratorindex ==  internalIterator.Length-1)
//            {
//                return false;
//            }
//            else
//            {
//                curretnIteration++;
//                return hasNext();
//            }
//        }
//    }
//}

